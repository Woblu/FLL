datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

type Record {
  username String
  percent  Int
  videoId  String
}

enum Role {
  USER
  MODERATOR
  ADMIN
}

enum SubmissionStatus {
  PENDING
  APPROVED
  REJECTED
}

enum DemonDifficulty {
  EASY
  MEDIUM
  HARD
  INSANE
  EXTREME
}

enum RecordStatus {
  IN_PROGRESS
  COMPLETED
}

enum FriendStatus {
  PENDING
  ACCEPTED
  DECLINED
  BLOCKED
}

enum LayoutStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
}

enum GameplayTag {
  WAVE
  SHIP
  TIMING
  MEMORY
  STRAIGHT_FLY
  SPAM
  DUAL
  UFO
  BALL
  ROBOT
  SPIDER
  SWING
  PLATFORMER
}

enum ReportStatus {
  PENDING
  REVIEWED
  RESOLVED
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum PartStatus {
  OPEN
  ASSIGNED
  COMPLETED
}

// New Enum for the Changelog
enum ChangeType {
  ADD
  REMOVE
  MOVE
}

model Level {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  placement   Int
  name        String
  creator     String
  verifier    String?
  levelId     Int?
  videoId     String
  description String?
  list        String
  records     Record[]
  tags        GameplayTag[]
  completions PersonalRecord[]
  changes     ListChange[] // New relation to the changelog
  @@map("levels")
}

model User {
  id                     String                 @id @default(auto()) @map("_id") @db.ObjectId
  email                  String                 @unique
  username               String                 @unique
  password               String
  role                   Role                   @default(USER)
  createdAt              DateTime               @default(now())
  isWorkshopBanned       Boolean                @default(false)
  submissions            Submission[]
  personalRecords        PersonalRecord[]
  pinnedRecordId         String?                @db.ObjectId
  friendshipsAsRequester Friendship[]           @relation("Requester")
  friendshipsAsReceiver  Friendship[]           @relation("Receiver")
  layoutsCreated         Layout[]
  reportsFiled           LayoutReport[]
  collaborationRequests  CollaborationRequest[]
  assignedParts          LevelPart[]
  conversations          Conversation[]         @relation(fields: [conversationIds], references: [id])
  conversationIds        String[]               @db.ObjectId
  messagesSent           Message[]
}

model Submission {
  id            String           @id @default(auto()) @map("_id") @db.ObjectId
  levelName     String
  player        String
  percent       Int
  videoId       String
  notes         String?
  status        SubmissionStatus @default(PENDING)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  submittedBy   User             @relation(fields: [submittedById], references: [id])
  submittedById String           @db.ObjectId
}

model PersonalRecord {
  id           String          @id @default(auto()) @map("_id") @db.ObjectId
  placement    Int
  levelName    String
  difficulty   DemonDifficulty
  attempts     Int?
  videoUrl     String
  thumbnailUrl String?
  createdAt    DateTime        @default(now())
  status       RecordStatus    @default(COMPLETED)
  percent      Int?
  user         User            @relation(fields: [userId], references: [id])
  userId       String          @db.ObjectId
  level        Level?          @relation(fields: [levelId], references: [id], onDelete: SetNull)
  levelId      String?         @db.ObjectId
}

model Friendship {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  status      FriendStatus @default(PENDING)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  requester   User         @relation("Requester", fields: [requesterId], references: [id])
  requesterId String       @db.ObjectId
  receiver    User         @relation("Receiver", fields: [receiverId], references: [id])
  receiverId  String       @db.ObjectId
  @@unique([requesterId, receiverId])
}

model Layout {
  id           String                 @id @default(auto()) @map("_id") @db.ObjectId
  levelName    String
  description  String?
  status       LayoutStatus           @default(OPEN)
  songName     String?
  songId       String?
  videoUrl     String
  thumbnailUrl String?
  difficulty   DemonDifficulty
  tags         GameplayTag[]
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
  creator      User                   @relation(fields: [creatorId], references: [id])
  creatorId    String                 @db.ObjectId
  reports      LayoutReport[]
  applicants   CollaborationRequest[]
  parts        LevelPart[]
  conversation Conversation?
}

model LayoutReport {
  id               String       @id @default(auto()) @map("_id") @db.ObjectId
  reason           String
  status           ReportStatus @default(PENDING)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  reportedLayout   Layout       @relation(fields: [reportedLayoutId], references: [id])
  reportedLayoutId String       @db.ObjectId
  reporter         User         @relation(fields: [reporterId], references: [id])
  reporterId       String       @db.ObjectId
}

model CollaborationRequest {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  message     String?
  status      RequestStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  applicant   User          @relation(fields: [applicantId], references: [id])
  applicantId String        @db.ObjectId
  layout      Layout        @relation(fields: [layoutId], references: [id])
  layoutId    String        @db.ObjectId
  @@unique([applicantId, layoutId])
}

model LevelPart {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  startPercent Int
  endPercent   Int
  description  String?
  status       PartStatus @default(OPEN)
  layout       Layout     @relation(fields: [layoutId], references: [id])
  layoutId     String     @db.ObjectId
  assignee     User?      @relation(fields: [assigneeId], references: [id])
  assigneeId   String?    @db.ObjectId
}

model Conversation {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime  @default(now())
  layout    Layout    @relation(fields: [layoutId], references: [id])
  layoutId  String    @unique @db.ObjectId
  members   User[]    @relation(fields: [memberIds], references: [id])
  memberIds String[]  @db.ObjectId
  messages  Message[]
}

model Message {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  content        String
  createdAt      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String       @db.ObjectId
  author         User         @relation(fields: [authorId], references: [id])
  authorId       String       @db.ObjectId
}

// New Model for the Changelog
model ListChange {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime   @default(now())
  type        ChangeType
  description String
  level       Level      @relation(fields: [levelId], references: [id], onDelete: Cascade)
  levelId     String     @db.ObjectId
}